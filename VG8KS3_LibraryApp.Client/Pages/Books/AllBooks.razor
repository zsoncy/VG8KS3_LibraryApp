@page "/books"
@using VG8KS3_LibraryApp.Shared.Models
@inject HttpClient Http



<style>
    .btn-primary:hover,
    .btn-primary:focus {
        background-color: #6f42c1 !important;
        border-color: #6f42c1 !important;
        color: white !important;
    }
</style>

<PageTitle>Books</PageTitle>

<div class="container-fluid">
    
    <div class="row vh-100">

        <div class="col-10 bg-light p-4">
            
            <h3 class="mb-5 mt-5">All books in the database.</h3>
            
            @if (books == null)
            {
                <p>Loading...</p>
            }
            else
            {
                <table class="table table-bordered table-striped" style="width: 100%;">
                    
                    <thead>
                    <tr>
                        <th>ID</th>
                        <th>Title</th>
                        <th>Author</th>
                        <th>Publisher</th>
                        <th>Release Year</th>
                        <th class="text-center align-middle">Update</th>
                        <th class="text-center align-middle">Delete</th>
                    </tr>
                    </thead>
                    
                    <tbody>
                    @foreach (var b in books)
                    {
                        <tr>
                            <td>@b.BookId</td>
                            <td>@b.Title</td>
                            <td>@b.Author</td>
                            <td>@b.Publisher</td>
                            <td>@b.ReleaseDate</td>
                            <td class="text-center">
                                <button type="submit" class="btn btn-primary btn-outline-light align-content-center" @onclick="() => NavigateToUpdatePage(b.BookId)">
                                    <span class="bi bi-pencil-square" aria-hidden="true"></span>
                                </button>
                            </td>
                            <td class="text-center d-flex flex-column justify-content-center align-items-center">
                                <button type="submit" class="btn btn-primary btn-outline-light align-content-center" @onclick="() => HandleDeleteBook(b.BookId)">
                                    <span class="bi bi-trash-fill" aria-hidden="true"></span>
                                </button>
                            </td>
                        </tr>
                    }
                    </tbody>
                    
                </table>
            }
            
        </div>

        <div class="col-2 d-flex h-50">

            <div class=" flex-column d-flex justify-content-around align-items-center text-white">

                <p>Search books by title.</p>
                
                <EditForm Model="@bookSearch" OnValidSubmit="@NavigateToSearchPage" class="d-flex flex-column justify-content-center align-items-center mt-4">
                    
                    <InputText @bind-Value="bookSearch.Query" placeholder="Search by title..." class="form-control mb-2"/>
                    
                    <button type="submit" class="btn btn-primary btn-outline-light w-75">
                        <span class="bi bi-search" aria-hidden="true"></span> Search
                    </button>
                    
                </EditForm>

                <p>Add book to the database.</p>
                
                <EditForm Model="@bookToAdd" OnValidSubmit="@HandleAddBook" class=" d-flex flex-column justify-content-center align-items-center">
                    
                    <InputText @bind-Value="bookToAdd.Title" placeholder="Title" class="form-control mb-2"/>
                    <InputText @bind-Value="bookToAdd.Author" placeholder="Author" class="form-control mb-2"/>
                    <InputText @bind-Value="bookToAdd.Publisher" placeholder="Publisher" class="form-control mb-2"/>
                    <InputNumber @bind-Value="bookToAdd.ReleaseDate" placeholder="Release Date" class="form-control mb-2"/>
                    
                    <button type="submit" class="btn btn-primary btn-outline-light mb-3 w-75">
                        <span class="bi bi-plus-square" aria-hidden="true"></span> Add
                    </button>
                    
                </EditForm>
                
            </div>
            
        </div>

    </div>
    
</div>






@code {
    
    [Inject] private NavigationManager Navigation { get; set; } = default!;
    
    /// <summary>
    /// list of all the book objects in the database
    /// </summary>
    private List<Book>? books;
     
    /// <summary>
    /// the book object we want to add to the database
    /// </summary>
    private Book bookToAdd = new Book();
    
    
    protected override async Task OnInitializedAsync()
    {
        await LoadBooksAsync();
    }
    
    /// <summary>
    /// method to load all book objects from the database
    /// </summary>
    private async Task LoadBooksAsync()
    {
        books = await Http.GetFromJsonAsync<List<Book>>("api/Book");
    }
    
    /// <summary>
    /// method to ADD BOOK to the database via HTTP Controllers
    /// </summary>
    private async Task HandleAddBook()
    {
        var response = await Http.PostAsJsonAsync($"api/Book", bookToAdd);
        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Book added successfully.");
            bookToAdd = new Book();
            await LoadBooksAsync();
        }
        else
        {
            Console.WriteLine("Failed to add the book.");
        }

    }

    /// <summary>
    /// method to DELETE BOOK from the database via HTTP Controllers
    /// </summary>
    /// <param name="bookToDeleteId">the ID of the book that is supposed to be deleted</param>
    private async Task HandleDeleteBook(int bookToDeleteId)
    {
        var response = await Http.DeleteAsync($"api/Book/{bookToDeleteId}");
        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Book deleted successfully.");
            await LoadBooksAsync();
        }
        else
        {
            Console.WriteLine("Failed to delete the book.");
        }
    }

    /// <summary>
    /// the class for the search containing the query
    /// </summary>
    private class BookSearch
    {
        public string Query { get; set; } = string.Empty;
    }
    
    /// <summary>
    /// the search object that will store the query
    /// </summary>
    private BookSearch bookSearch = new BookSearch();
    
    /// <summary>
    /// method to navigate to SEARCH BOOK page according to the query
    /// </summary>
    private void NavigateToSearchPage()
    {
        if (!string.IsNullOrWhiteSpace(bookSearch.Query))
        {
            var encodedQuery = Uri.EscapeDataString(bookSearch.Query);
            Navigation.NavigateTo($"/books/search/{encodedQuery}");
        }
    }
    
    /// <summary>
    /// method to navigate to UPDATE BOOK page
    /// </summary>
    /// <param name="bookToUpdateId">the ID of the book what is supposed to be edited, for navigation</param>
    private void NavigateToUpdatePage(int bookToUpdateId)
    {
        Navigation.NavigateTo($"/books/update/{bookToUpdateId}");
    }
    
}