@page "/books/search/"
@page "/books/search/{query}"
@using VG8KS3_LibraryApp.Shared.Models
@inject HttpClient Http


<style>
    .btn-primary:hover,
    .btn-primary:focus {
        background-color: #6f42c1 !important;
        border-color: #6f42c1 !important;
        color: white !important;
    }
</style>

<PageTitle>Search book</PageTitle>

<h3 class="mb-5 mt-5">Search results: @query</h3>

<div class="col-12 d-flex flex-column justify-content-around align-items-center text-white">
    
    <EditForm Model="@bookSearch" OnValidSubmit="@NavigateToSearchPage" class="d-flex w-100 mt-4 gap-4">
        
        <InputText @bind-Value="bookSearch.Query" placeholder="Search by title..." class="form-control mb-2 "/>
       
        <button type="submit" class="btn btn-primary btn-outline-light" style=" height: 40px; width: 300px;">
            <span class="bi bi-search" aria-hidden="true"></span> Search
        </button>
        
    </EditForm>
    
</div>

@if (books == null)
{
    <p>Loading...</p>
}
else if (books.Count == 0)
{
    <p>No books found.</p>
}
else
{
    <table class="table table-striped table-bordered">
        
        <thead>
        <tr>
            <th>Title</th>
            <th>Author</th>
            <th>Publisher</th>
            <th>Release Year</th>
        </tr>
        </thead>
        
        <tbody>
        @foreach (var book in books)
        {
            <tr>
                <td>@book.Title</td>
                <td>@book.Author</td>
                <td>@book.Publisher</td>
                <td>@book.ReleaseDate</td>
            </tr>
        }
        </tbody>
        
    </table>
}

<div class="col-12 d-flex flex-column justify-content-around align-items-center text-white mt-5 mb-5">
    
    <a href="/books" class="btn btn-primary btn-outline-light " style=" width: 500px;  font-size: 20px;">Cancel</a>
    
</div>


@code {
    [Inject] private NavigationManager Navigation { get; set; } = default!;
    [Parameter] public string query { get; set; } = string.Empty;
    
    /// <summary>
    /// list of all the matching book objects in the database based on the query
    /// </summary>
    private List<Book>? books;
    
    
    protected override async Task OnParametersSetAsync()
    {
        await LoadContentAsync();
    }
    
    /// <summary>
    /// method to load the matching data from the database based on the query,
    /// in other words, to SEARCH BOOK from the database via HTTP Controllers
    /// </summary>
    private async Task LoadContentAsync()
    {
        string url;

        if (string.IsNullOrWhiteSpace(query))
        {
            url = "api/Book/";
        }
        else
        {
            var encodedQuery = Uri.EscapeDataString(query); 
            url = $"api/Book/search?title={encodedQuery}";
        }

        var response = await Http.GetAsync(url);
        
        if (response.IsSuccessStatusCode)
        {
            books = await response.Content.ReadFromJsonAsync<List<Book>>();
        }
        else
        {
            books = new();
        }
    }
    
    /// <summary>
    /// the class for the search containing the query
    /// </summary>
    private class BookSearch
    {
        public string Query { get; set; } = string.Empty;
    }
    
    /// <summary>
    /// the search object that will store the query
    /// </summary>
    private BookSearch bookSearch = new BookSearch();
    
    /// <summary>
    /// method to navigate to SEARCH BOOK page according to the query
    /// </summary>
    private void NavigateToSearchPage()
    {
        if (!string.IsNullOrWhiteSpace(bookSearch.Query))
        {
            var encodedQuery = Uri.EscapeDataString(bookSearch.Query);
            Navigation.NavigateTo($"/books/search/{encodedQuery}");
        }
    }
    
}