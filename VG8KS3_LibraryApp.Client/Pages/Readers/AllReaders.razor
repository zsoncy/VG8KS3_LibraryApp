@page "/readers"
@using VG8KS3_LibraryApp.Shared.Models
@inject HttpClient Http



<style>
    .btn-primary:hover,
    .btn-primary:focus {
        background-color: #6f42c1 !important;
        border-color: #6f42c1 !important;
        color: white !important;
    }
</style>

<PageTitle>Readers</PageTitle>

<div class="container-fluid">
    
    <div class="row vh-100">

        <div class="col-10 bg-light p-4">
            
            <h3 class="mb-5 mt-5">All readers in the database.</h3>
            
            @if (readers == null)
            {
                <p>Loading...</p>
            }
            else
            {
                <table class="table table-bordered table-striped" style="width: 100%;">
                    
                    <thead>
                    <tr>
                        <th>ID</th>
                        <th>Name</th>
                        <th>Address</th>
                        <th>Date of birth</th>
                        <th class="text-center align-middle">Update</th>
                        <th class="text-center align-middle">Delete</th>
                    </tr>
                    </thead>
                    
                    <tbody>
                    @foreach (var r in readers)
                    {
                        <tr>
                            <td>@r.ReaderId</td>
                            <td>@r.Name</td>
                            <td>@r.Adress</td>
                            <td>@($"{r.DateOfBirth.Year}. {r.DateOfBirth.Month}. {r.DateOfBirth.Day}")</td>
                            <td class="text-center">
                                <button type="submit" class="btn btn-primary btn-outline-light align-content-center" @onclick="() => NavigateToUpdatePage(r.ReaderId)">
                                    <span class="bi bi-pencil-square" aria-hidden="true"></span>
                                </button>
                            </td>
                            <td class="text-center d-flex flex-column justify-content-center align-items-center">
                                <button type="submit" class="btn btn-primary btn-outline-light align-content-center" @onclick="() => HandleDeleteReader(r.ReaderId)">
                                    <span class="bi bi-trash-fill" aria-hidden="true"></span>
                                </button>
                            </td>
                        </tr>
                    }
                    </tbody>
                    
                </table>
            }
            
        </div>
        
        <div class="col-2 d-flex h-50">
            
            <div class=" flex-column d-flex justify-content-around align-items-center text-white">

                <EditForm Model="@readerSearch" OnValidSubmit="@NavigateToSearchPage" class="d-flex flex-column justify-content-center align-items-center mt-4">

                    <p>Search readers by name.</p>
                    
                    <InputText @bind-Value="readerSearch.Query" placeholder="Search by name..." class="form-control mb-2"/>

                    <button type="submit" class="btn btn-primary btn-outline-light w-75">
                        <span class="bi bi-search" aria-hidden="true"></span> Search
                    </button>

                </EditForm>

                <p>Add reader to the database.</p>
                
                <EditForm Model="@readerToAdd" OnValidSubmit="@HandleAddReader" class=" d-flex flex-column justify-content-center align-items-center">
                    <DataAnnotationsValidator />

                    <InputText @bind-Value="readerToAdd.Name" placeholder="Name" class="form-control mb-2"/>
                    <ValidationMessage For="@(() => readerToAdd.Name)" />
                    
                    <InputText @bind-Value="readerToAdd.Adress" placeholder="Address" class="form-control mb-2"/>
                    <ValidationMessage For="@(() => readerToAdd.Adress)" />
                    
                    <InputDate @bind-Value="readerToAdd.DateOfBirth" class="form-control mb-2"/>
                    <ValidationMessage For="@(() => readerToAdd.DateOfBirth)" />

                    <button type="submit" class="btn btn-primary btn-outline-light mb-3 w-75">
                        <span class="bi bi-plus-square" aria-hidden="true"></span> Add
                    </button>

                </EditForm>

            </div>
            
        </div>
        
    </div>
    
</div>







@code {
    
    [Inject] private NavigationManager Navigation { get; set; } = default!;
    
    /// <summary>
    /// list of all the reader objects in the database
    /// </summary>
    private List<Reader>? readers;
    
    /// <summary>
    /// the reader object we want to add to the database
    /// </summary>
    private Reader readerToAdd = new Reader();

    
    protected override async Task OnInitializedAsync()
    {
        await LoadReadersAsync();
    }
    
    /// <summary>
    /// method to load all book objects from the database
    /// </summary>
    private async Task LoadReadersAsync()
    {
        readers = await Http.GetFromJsonAsync<List<Reader>>("api/Reader");
    }
    
    /// <summary>
    /// method to ADD READER to the database via HTTP Controllers
    /// </summary>
    private async Task HandleAddReader()
    {
        var response = await Http.PostAsJsonAsync($"api/Reader", readerToAdd);
        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Book added successfully.");
            readerToAdd = new Reader();
            await LoadReadersAsync();
        }
        else
        {
            Console.WriteLine("Failed to add the reader.");
        }

    }
    
    /// <summary>
    /// method to DELETE READER from the database via HTTP Controllers
    /// </summary>
    /// <param name="readerToDeleteId">the ID of the reader that is supposed to be deleted</param>
    private async Task HandleDeleteReader(int readerToDeleteId)
    {
        var response = await Http.DeleteAsync($"api/Reader/{readerToDeleteId}");
        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Book deleted successfully.");
            await LoadReadersAsync();
        }
        else
        {
            Console.WriteLine("Failed to delete the book.");
        }
    }
    
    /// <summary>
    /// the class for the search containing the query
    /// </summary>
    private class ReaderSearch
    {
        public string Query { get; set; } = string.Empty;
    }
    
    /// <summary>
    /// the search object that will store the query
    /// </summary>
    private ReaderSearch readerSearch = new ReaderSearch();
    
    /// <summary>
    /// method to navigate to SEARCH READER page according to the query
    /// </summary>
    private void NavigateToSearchPage()
    {
        if (!string.IsNullOrWhiteSpace(readerSearch.Query))
        {
            var encodedQuery = Uri.EscapeDataString(readerSearch.Query);
            Navigation.NavigateTo($"/readers/search/{encodedQuery}");
        }
    }
    
    /// <summary>
    /// method to navigate to UPDATE READER page
    /// </summary>
    /// <param name="readerToUpdateId">the ID of the reader that is supposed to be edited, for navigation</param>
    private void NavigateToUpdatePage(int readerToUpdateId)
    {
        Navigation.NavigateTo($"/readers/update/{readerToUpdateId}");
    }
    
}